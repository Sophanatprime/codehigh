%%%  -*- coding: utf-8 -*-
%%% ----------------------------------------------------------------------------
%%% Codehigh  : Highlight codes and demos with LaTeX3
%%% Author    : Jianrui Lyu <tolvjr@163.com>
%%% Repository: https://github.com/lvjr/codehigh
%%% License   : The LaTeX Project Public License 1.3c
%%% ----------------------------------------------------------------------------

%~%% -------------------------------------------------------
%~%  \section{Variables and Functions}
%~%% -------------------------------------------------------

\NeedsTeXFormat{LaTeX2e}
\RequirePackage{expl3}
\ProvidesExplPackage{codehigh}{2021-05-07}{2021B}
  {Highlight codes and demos with LaTeX3}

%\RequirePackage{xparse}
\RequirePackage{l3benchmark}
\RequirePackage{catchfile}
\RequirePackage{xcolor}
\RequirePackage{ninecolors}
\RequirePackage{varwidth}

\ExplSyntaxOn

\int_new:N \l__codehigh_a_int
\int_new:N \l__codehigh_b_int
\tl_new:N \l__codehigh_a_tl
\tl_new:N \l__codehigh_b_tl
\tl_new:N \l__codehigh_c_tl
\tl_new:N \l__codehigh_d_tl
\tl_new:N \l__codehigh_m_tl

\cs_generate_variant:Nn \regex_set:Nn {cn}
\cs_generate_variant:Nn \seq_set_split:Nnn {NVV}
\cs_generate_variant:Nn \str_remove_once:Nn {NV}
\cs_generate_variant:Nn \tl_set_rescan:Nnn {NnV}

\prg_generate_conditional_variant:Nnn \regex_extract_once:NnN {cVN} {T, TF}
\prg_generate_conditional_variant:Nnn \regex_split:NnN {cVN} {T, TF}

\group_begin:
  \obeylines
  \tl_gset:Nn \g__codehigh_par_tl {^^M}
  \tl_gset:Nn \g__codehigh_par_par_tl {^^M^^M}
\group_end:

%~%% -------------------------------------------------------
%~%  \section{Set CodeHign Options}
%~%% -------------------------------------------------------

\bool_new:N \l__codehigh_lite_bool
\bool_new:N \l__codehigh_long_bool
\bool_new:N \l__codehigh_demo_bool

\NewDocumentCommand \CodeHigh {O{} m}
  {
    \keys_set:nn {codehigh} {#2}
  }

\keys_define:nn {codehigh}
  {
    lite .bool_set:N = \l__codehigh_lite_bool,
    long .bool_set:N = \l__codehigh_long_bool,
    demo .bool_set:N = \l__codehigh_demo_bool,
  }

%~%% -------------------------------------------------------
%~%  \section{CodeHign Environments and Commands}
%~%% -------------------------------------------------------

\NewDocumentCommand \NewCodeHighEnv {mm}
  {
    \NewDocumentEnvironment {#1} {O{}}
      {
        \keys_set:nn {codehigh} {#2, ##1}
        \bgroup
        \__codehigh_do_specials:
        \begin{codehigh@aux}
      }
      {
        \end{codehigh@aux}
        \egroup
        \__codehigh_typeset:
      }
  }

\cs_new_protected:Npn \__codehigh_do_specials:
  {
    \obeylines
    \obeyspaces
    \catcode `\% = 12
  }

\tl_new:N \g__codehigh_code_tl

\NewDocumentEnvironment {codehigh@aux} {+b}
  {
    \tl_gset:Nn \g__codehigh_code_tl { #1 }
    %\tl_log:N \g__codehigh_code_tl
  }
  { }

\cs_new_protected:Npn \__codehigh_typeset:
  {
    \bool_if:NTF \l__codehigh_demo_bool
      {\__codehigh_typeset_demo:} {\__codehigh_typeset_code:}
  }

\NewCodeHighEnv {codehigh} {}
\NewCodeHighEnv {demohigh} {demo}

\tl_new:N \l__codehigh_input_tl
\seq_new:N \l__codehigh_input_seq

\NewDocumentCommand \NewCodeHighInput {mm}
  {
    \NewDocumentCommand #1 {O{}m}
      {
        \group_begin:
        \keys_set:nn {codehigh} {#2, ##1}
        \CatchFileDef \l__codehigh_input_tl {##2} {\__codehigh_do_specials:}
        \__codehigh_typeset_input:N \l__codehigh_input_tl
        \group_end:
      }
  }

\cs_new_protected:Npn \__codehigh_typeset_input:N #1
  {
    \seq_set_split:NVV \l__codehigh_input_seq \g__codehigh_par_par_tl #1
    \seq_map_inline:Nn \l__codehigh_input_seq
      {
        \tl_gset:Nn \g__codehigh_code_tl {##1}
        \__codehigh_typeset_code:
        \par
        \medskip
      }
  }

\NewCodeHighInput \dochighinput {long}

%~%% -------------------------------------------------------
%~%  \section{Typeset CodeHign Code}
%~%% -------------------------------------------------------

\tl_new:N  \l__codehigh_main_bg_tl
\dim_new:N \l__codehigh_main_boxsep_dim
\tl_new:N \l__codehigh_codebox_bg_tl
\tl_new:N \l__codehigh_demobox_bg_tl

\keys_define:nn {codehigh}
  {
    bg .tl_set:N = \l__codehigh_main_bg_tl,
    bg .initial:n = gray9,
    boxsep .dim_set:N = \l__codehigh_main_boxsep_dim,
    boxsep .initial:n = 3pt,
    codebox / bg .tl_set:N = \l__codehigh_codebox_bg_tl,
    codebox / bg .initial:n = gray9,
    demobox / bg .tl_set:N = \l__codehigh_demobox_bg_tl,
    demobox / bg .initial:n = white,
  }

\box_new:N \g__codehigh_code_box

\cs_new_protected:Npn \__codehigh_typeset_code:
  {
    \par\addvspace{0.5em}\noindent
    \bool_if:NTF \l__codehigh_long_bool
      {\__codehigh_typeset_code_text:} {\__codehigh_typeset_code_box:}
    \par\addvspace{0.5em}
  }

\cs_new_protected:Npn \__codehigh_typeset_code_text:
  {
    \__codehigh_prepare_code:N \l_tmpa_tl
    \__codehigh_get_code_text:n \l_tmpa_tl
  }

\cs_new_protected:Npn \__codehigh_typeset_code_box:
  {
    \__codehigh_build_code:
    \__codehigh_put_code_box:
  }

\cs_new_protected:Npn \__codehigh_build_code:
  {
    \__codehigh_prepare_code:N \l_tmpa_tl
    \__codehigh_get_code_box:nN \l_tmpa_tl \g__codehigh_code_box
  }

\cs_new_protected:Npn \__codehigh_prepare_code:N #1
  {
    \tl_set_eq:NN #1 \g__codehigh_code_tl
    \regex_replace_once:nnN {^ \^^M} {} #1
    \regex_replace_once:nnN {\^^M $} {} #1
    \regex_replace_all:nnN { . } { \c{string} \0 } #1
    \tl_set:Nx #1 { #1 }
  }

\cs_new_protected:Npn \__codehigh_put_code_box:
  {
    \setlength \fboxsep {\l__codehigh_main_boxsep_dim}
    \colorbox{\l__codehigh_main_bg_tl}
      {
        \hbox_to_wd:nn {\linewidth-2\fboxsep}
          {
            \colorbox{\l__codehigh_codebox_bg_tl}
              {\box_use:N \g__codehigh_code_box}
          }
      }
  }

%% #1: text to parse; #2: resulting box
\cs_new_protected:Npn \__codehigh_get_code_box:nN #1 #2
  {
    \hbox_gset:Nn #2
      {
        \begin{varwidth}{\linewidth}
          \__codehigh_get_code_text:n {#1}
        \end{varwidth}
      }
  }

\cs_new_protected:Npn \__codehigh_get_code_text:n #1
  {
    \group_begin:
      \setlength \parindent {0pt}
      \linespread {1}
      \ttfamily
      \bool_if:NTF \l__codehigh_lite_bool
        {\__codehigh_parse_code_lite:N #1}
        {\__codehigh_parse_code:VN \l__codehigh_language_name_tl #1}
    \group_end:
  }

%~%% -------------------------------------------------------
%~%  \section{Typeset CodeHign Demo}
%~%% -------------------------------------------------------

\box_new:N \g__codehigh_demo_box

\cs_new_protected:Npn \__codehigh_typeset_demo:
  {
    \__codehigh_build_code:
    \__codehigh_build_demo:
    \dim_set:Nn \l_tmpa_dim { \box_wd:N \g__codehigh_code_box }
    \dim_set:Nn \l_tmpb_dim { \box_wd:N \g__codehigh_demo_box }
    %\tl_log:x { \dim_use:N \l_tmpa_dim + \dim_use:N \l_tmpb_dim  }
    \par\addvspace{0.5em}\noindent
    \setlength \fboxsep {\l__codehigh_main_boxsep_dim}
    \colorbox{\l__codehigh_main_bg_tl}
      {
        \dim_compare:nNnTF {\l_tmpa_dim + \l_tmpb_dim + 6\fboxsep} > {\linewidth}
          {
            \vbox:n
              {
                \dim_set:Nn \hsize {\linewidth-2\fboxsep}
                \noindent\colorbox{\l__codehigh_codebox_bg_tl}
                  {\box_use:N \g__codehigh_code_box}
                \par
                \noindent\colorbox{\l__codehigh_demobox_bg_tl}
                  {\box_use:N \g__codehigh_demo_box}
              }
          }
          {
          \hbox_to_wd:nn {\linewidth-2\fboxsep}
              {
                \colorbox{\l__codehigh_codebox_bg_tl}
                  {\box_use:N \g__codehigh_code_box}
                \hfill
                \colorbox{\l__codehigh_demobox_bg_tl}
                  {\box_use:N \g__codehigh_demo_box}
              }
          }
      }
    \par\addvspace{0.5em}
  }

\cs_new_protected:Npn \__codehigh_build_demo:
  {
    \tl_set_eq:NN \l_tmpb_tl \g__codehigh_code_tl
    \tl_set_rescan:NnV \l_tmpb_tl
      {
        \catcode `\% = 14 \relax
        \catcode `\^^M = 10 \relax
      }
      \l_tmpb_tl
    %\tl_log:N \l_tmpb_tl
    \__codehigh_get_demo_box:nN \l_tmpb_tl \g__codehigh_demo_box
  }

%% #1: text to typeset; #2: resulting box
\cs_new_protected:Npn \__codehigh_get_demo_box:nN #1 #2
  {
    \hbox_gset:Nn #2
      {
        \dim_set:Nn \linewidth {\linewidth-4\l__codehigh_main_boxsep_dim}
        \begin{varwidth}{\linewidth}
          \setlength { \parindent } { 0pt }
          \linespread {1}
          \tl_use:N #1
        \end{varwidth}
      }
  }

%~%% -------------------------------------------------------
%~%  \section{Add CodeHign Languages}
%~%% -------------------------------------------------------

\keys_define:nn {codehigh}
  {
    language .tl_set:N = \l__codehigh_language_name_tl,
    language .initial:n = latex,
  }

%% #1: language name; #2: syntax rank; #3: syntax name; #4: syntax regex
\NewDocumentCommand \CodeHighAddSyntax {m m m m}
  {
    \int_if_exist:cF {l__codehigh_#1_syntax_count_int}
      {\int_new:c {l__codehigh_#1_syntax_count_int}}
    \int_incr:c {l__codehigh_#1_syntax_count_int}
    \tl_set:cn
      {l__codehigh_#1_ \int_use:c {l__codehigh_#1_syntax_count_int} _rank_tl} {#2}
    \tl_set:cn
      {l__codehigh_#1_ \int_use:c {l__codehigh_#1_syntax_count_int} _name_tl} {#3}
    \regex_set:cn
      {l__codehigh_#1_ \int_use:c {l__codehigh_#1_syntax_count_int} _regex} {#4}
  }

\CodeHighAddSyntax {latex} {1} {Newline}   { \\ \\ }
\CodeHighAddSyntax {latex} {2} {Alignment} { \& }
\CodeHighAddSyntax {latex} {3} {BeginEnd}  { \\ (begin|end) }
\CodeHighAddSyntax {latex} {4} {Command}   { \\ [A-Za-z]+ }
\CodeHighAddSyntax {latex} {5} {Comment}   { \% .*? \^^M }

%~%% -------------------------------------------------------
%~%  \section{Add CodeHigh Themes}
%~%% -------------------------------------------------------

\keys_define:nn {codehigh}
  {
    style .tl_set:N = \l__codehigh_theme_name_tl,
    style .initial:n = default,
  }

%% #1: theme name; #2: syntax rank; #3: sytle commands
\NewDocumentCommand \CodeHighAddStyle {m m m}
  {
    \tl_set:cn {l__codehigh_style_#1_#2_tl} {#3}
  }

\CodeHighAddStyle {default} {0} {\color{black}}
\CodeHighAddStyle {default} {1} {\color{purple3}}
\CodeHighAddStyle {default} {2} {\color{brown3}}
\CodeHighAddStyle {default} {3} {\color{blue3}}
\CodeHighAddStyle {default} {4} {\color{teal3}}
\CodeHighAddStyle {default} {5} {\color{gray3}}

%~%% -------------------------------------------------------
%~%  \section{Parse and Highlight Code}
%~%% -------------------------------------------------------

\int_new:N \l__codehigh_item_count_int
\tl_new:N \l__codehigh_code_to_parse_tl
\tl_new:N \l__codehigh_regex_match_rank_tl
\tl_new:N \l__codehigh_regex_match_text_tl
\tl_new:N \l__codehigh_regex_before_text_tl

\cs_new_protected:Npn \__codehigh_parse_code:nN #1 #2
  {
    \tl_set_eq:NN \l__codehigh_code_to_parse_tl #2
    \bool_do_until:nn {\tl_if_empty_p:N \l__codehigh_code_to_parse_tl}
      {
        \__codehigh_parse_code_once:nN {#1} \l__codehigh_code_to_parse_tl
        \int_compare:nNnTF {\l__codehigh_item_count_int} = {-1}
          {
            \__codehigh_typeset_text:nN {0} \l__codehigh_code_to_parse_tl
            \tl_clear:N \l__codehigh_code_to_parse_tl
          }
          {
            \tl_concat:NNN \l__codehigh_a_tl
              \l__codehigh_regex_before_text_tl \l__codehigh_regex_match_text_tl
            \str_remove_once:NV \l__codehigh_code_to_parse_tl \l__codehigh_a_tl
            %\tl_log:N \l__codehigh_code_to_parse_tl
            \__codehigh_typeset_text:nN {0}
              \l__codehigh_regex_before_text_tl
            \__codehigh_typeset_text:VN \l__codehigh_regex_match_rank_tl
              \l__codehigh_regex_match_text_tl
          }
      }
  }
\cs_generate_variant:Nn \__codehigh_parse_code:nN {VN}

\cs_new_protected:Npn \__codehigh_parse_code_once:nN #1 #2
  {
    \int_set:Nn \l__codehigh_item_count_int { -1 }
    \tl_clear:N \l__codehigh_regex_match_text_tl
    \tl_clear:N \l__codehigh_regex_before_text_tl
    \int_step_inline:nn {\cs:w l__codehigh_#1_syntax_count_int \cs_end:}
      {
        \regex_extract_once:cVNT {l__codehigh_#1_##1_regex} #2 \l_tmpa_seq
          {
            \seq_get:NN \l_tmpa_seq \l__codehigh_m_tl
            \regex_split:cVNT { l__codehigh_#1_##1_regex } #2 \l_tmpb_seq
              {
                \seq_get:NN \l_tmpb_seq \l__codehigh_b_tl
                \tl_set:Nx \l__codehigh_c_tl {\str_count:N \l__codehigh_b_tl}
                \bool_lazy_or:nnT
                  { \int_compare_p:nNn {\l__codehigh_item_count_int} = {-1} }
                  {
                    \int_compare_p:nNn
                      {\l__codehigh_item_count_int} > {\l__codehigh_c_tl}
                  }
                  {
                    \int_set:Nn \l__codehigh_item_count_int {\l__codehigh_c_tl}
                    \tl_set_eq:NN \l__codehigh_regex_before_text_tl
                      \l__codehigh_b_tl
                    \tl_set_eq:NN \l__codehigh_regex_match_text_tl
                      \l__codehigh_m_tl
                    \tl_set_eq:Nc \l__codehigh_regex_match_rank_tl
                      {l__codehigh_#1_##1_rank_tl}
                  }
              }
          }
      }
  }

%% #1: syntax rank, #2: text
\cs_new_protected:Npn \__codehigh_typeset_text:nN #1 #2
  {
    \group_begin:
      \regex_replace_all:nnN { \^^M } { \c{par} \c{leavevmode} } #2
      \regex_replace_all:nnN { \  } { \c{relax} \c{space} } #2
      \tl_use:c { l__codehigh_style_ \l__codehigh_theme_name_tl _#1_tl }
      #2
    \group_end:
  }
\cs_generate_variant:Nn \__codehigh_typeset_text:nN { VN }

%~%% -------------------------------------------------------
%~%  \section{Don't Highlight Code}
%~%% -------------------------------------------------------

\cs_new_protected:Npn \__codehigh_parse_code_lite:N #1
  {
    \regex_replace_all:nnN { \^^M } { \c{par} \c{leavevmode} } #1
    \regex_replace_all:nnN { \  } { \c{relax} \c{space} } #1
    \tl_use:N #1
  }

\ExplSyntaxOff

