%%%  -*- coding: utf-8 -*-
%%% ----------------------------------------------------------------------------
%%% Codehigh  : Highlight codes and demos with LaTeX3
%%% Author    : Jianrui Lyu <tolvjr@163.com>
%%% Repository: https://github.com/lvjr/codehigh
%%% License   : The LaTeX Project Public License 1.3c
%%% ----------------------------------------------------------------------------

\NeedsTeXFormat{LaTeX2e}
\RequirePackage{expl3}
\ProvidesExplPackage{codehigh}{2021-04-11}{2021A}
  {Highlight codes and demos with LaTeX3}

%\RequirePackage{xparse}
\RequirePackage{l3benchmark}
\RequirePackage{catchfile}
\RequirePackage{xcolor}
\RequirePackage{ninecolors}
\RequirePackage{varwidth}

\ExplSyntaxOn

\int_new:N \l__codehigh_a_int
\int_new:N \l__codehigh_b_int
\tl_new:N \l__codehigh_a_tl
\tl_new:N \l__codehigh_b_tl
\tl_new:N \l__codehigh_c_tl
\tl_new:N \l__codehigh_d_tl
\tl_new:N \l__codehigh_m_tl

\cs_generate_variant:Nn \regex_set:Nn { cn }
\cs_generate_variant:Nn \seq_set_split:Nnn { NVV }
\cs_generate_variant:Nn \str_remove_once:Nn { NV }
\cs_generate_variant:Nn \tl_set_rescan:Nnn { NnV }

\prg_generate_conditional_variant:Nnn \regex_extract_once:NnN { cVN } { T, TF }
\prg_generate_conditional_variant:Nnn \regex_split:NnN { cVN } { T, TF }

\group_begin:
  \obeylines
  \tl_gset:Nn \g__codehigh_par_tl {^^M}
  \tl_gset:Nn \g__codehigh_par_par_tl {^^M^^M}
\group_end:

\NewDocumentEnvironment { codehigh } { }
  {
    \bgroup
    \__codehigh_do_specials:
    \begin{codehigh@aux}
  }
  {
    \end{codehigh@aux}
    \egroup
    \__codehigh_typeset_code:
  }

\NewDocumentEnvironment { demohigh } { }
  {
    \bgroup
    \__codehigh_do_specials:
    \begin{codehigh@aux}
  }
  {
    \end{codehigh@aux}
    \egroup
    \__codehigh_typeset_demo:
  }

\cs_new_protected:Npn \__codehigh_do_specials:
  {
    \obeylines
    \obeyspaces
    \catcode `\% = 12
  }

\tl_new:N \g__codehigh_code_tl

\NewDocumentEnvironment { codehigh@aux } { +b }
  {
    \tl_gset:Nn \g__codehigh_code_tl { #1 }
    %\tl_log:N \g__codehigh_code_tl
  }
  { }

\NewDocumentCommand \CodeHigh {O{} m}
  {
    \keys_set:nn {codehigh} {#2}
  }

\bool_new:N \g__codehigh_lite_bool

\keys_define:nn {codehigh}
  {
    lite .bool_gset:N = \g__codehigh_lite_bool,
  }

\box_new:N \g__codehigh_code_box
\box_new:N \g__codehigh_demo_box

\cs_new_protected:Npn \__codehigh_typeset_code:
  {
    \__codehigh_build_code:
    \par\addvspace{0.5em}\noindent
    \colorbox{gray9}
      {
        \hbox_to_wd:nn {\linewidth-4\fboxsep}
          {
            \colorbox{gray9}{\box_use:N \g__codehigh_code_box}
          }
      }
    \par\addvspace{0.5em}
  }

\cs_new_protected:Npn \__codehigh_build_code:
  {
    \tl_set_eq:NN \l_tmpa_tl \g__codehigh_code_tl
    \regex_replace_once:nnN {\^^M $} {} \l_tmpa_tl
    \regex_replace_all:nnN { . } { \c{string} \0 } \l_tmpa_tl
    \tl_set:Nx \l_tmpa_tl { \l_tmpa_tl }
    \tl_set_eq:NN \l_tmpb_tl \l_tmpa_tl
    \__codehigh_get_code_box:nN \l_tmpb_tl \g__codehigh_code_box
  }

%% #1: text to parse; #2: resulting box
\cs_new_protected:Npn \__codehigh_get_code_box:nN #1 #2
  {
    \hbox_gset:Nn #2
      {
        \begin{varwidth}{\linewidth}
          \setlength \parindent {0pt}
          \linespread {1}
          \ttfamily
          \bool_if:NTF \g__codehigh_lite_bool
            {\__codehigh_parse_code_lite:N #1}
            {\__codehigh_parse_code:nN {latex} #1}
        \end{varwidth}
      }
  }

\cs_new_protected:Npn \__codehigh_parse_code_lite:N #1
  {
    \regex_replace_all:nnN { \^^M } { \c{par} } #1
    \tl_use:N #1
  }

\cs_new_protected:Npn \__codehigh_typeset_demo:
  {
    \__codehigh_build_code:
    \__codehigh_build_demo:
    \dim_set:Nn \l_tmpa_dim { \box_wd:N \g__codehigh_code_box }
    \dim_set:Nn \l_tmpb_dim { \box_wd:N \g__codehigh_demo_box }
    %\tl_log:x { \dim_use:N \l_tmpa_dim + \dim_use:N \l_tmpb_dim  }
    \par\addvspace{0.5em}\noindent
    \colorbox{gray9}
      {
        \dim_compare:nNnTF {\l_tmpa_dim + \l_tmpb_dim + 6\fboxsep} > {\linewidth}
          {
            \vbox:n
              {
                \dim_set:Nn \hsize {\linewidth-2\fboxsep}
                \noindent\colorbox{gray9}{\box_use:N \g__codehigh_code_box}
                \par
                \noindent\colorbox{white}{\box_use:N \g__codehigh_demo_box}
              }
          }
          {
          \hbox_to_wd:nn {\linewidth-2\fboxsep}
              {
                \colorbox{gray9}{\box_use:N \g__codehigh_code_box}
                \hfill
                \colorbox{white}{\box_use:N \g__codehigh_demo_box}
              }
          }
      }
    \par\addvspace{0.5em}
  }

\cs_new_protected:Npn \__codehigh_build_demo:
  {
    \tl_set_eq:NN \l_tmpb_tl \g__codehigh_code_tl
    \tl_set_rescan:NnV \l_tmpb_tl
      {
        \catcode `\% = 14 \relax
        \catcode `\^^M = 10 \relax
      }
      \l_tmpb_tl
    %\tl_log:N \l_tmpb_tl
    \__codehigh_get_demo_box:nN \l_tmpb_tl \g__codehigh_demo_box
  }

%% #1: text to typeset; #2: resulting box
\cs_new_protected:Npn \__codehigh_get_demo_box:nN #1 #2
  {
    \hbox_gset:Nn #2
      {
        \begin{varwidth}{\linewidth}
          \setlength { \parindent } { 0pt }
          \linespread {1}
          \tl_use:N #1
        \end{varwidth}
      }
  }

\int_new:N \l__codehigh_latex_syntax_count_int

%% #1: language name, #2: regex, #3: style name
\cs_new_protected:Npn \__codehigh_add_syntax:nnn #1 #2 #3
  {
    \int_incr:c { l__codehigh_ #1 _syntax_count_int }
    \regex_set:cn
      { l__codehigh_ #1 _ \int_use:c { l__codehigh_ #1 _syntax_count_int } _regex }
      { #2 }
    \tl_set:cn
      { l__codehigh_ #1 _ \int_use:c { l__codehigh_ #1 _syntax_count_int } _tl }
      { #3 }
  }

\__codehigh_add_syntax:nnn { latex } { \% .*? \^^M } { Comment }
\__codehigh_add_syntax:nnn { latex } { \& } { Alignment }
\__codehigh_add_syntax:nnn { latex } { \\ (begin|end) } { BeginEnd }
\__codehigh_add_syntax:nnn { latex } { \\ \\ } { Newline }
\__codehigh_add_syntax:nnn { latex } { \\ [A-Za-z]+ } { Command }

%% #1: style name, #2: commands
\cs_new_protected:Npn \__codehigh_add_style:nn #1 #2
  {
    \tl_set:cn { l__codehigh_style_ #1 _tl } { #2 }
  }

\__codehigh_add_style:nn { Default } { \color{black} }
\__codehigh_add_style:nn { Alignment } { \color{brown3} }
\__codehigh_add_style:nn { BeginEnd } { \color{blue3} }
\__codehigh_add_style:nn { Command } { \color{teal3} }
\__codehigh_add_style:nn { Comment } { \color{gray3} }
\__codehigh_add_style:nn { Newline } { \color{purple3} }

\int_new:N \l__codehigh_item_count_int
\tl_new:N \l__codehigh_code_to_parse_tl
\tl_new:N \l__codehigh_regex_match_name_tl
\tl_new:N \l__codehigh_regex_match_text_tl
\tl_new:N \l__codehigh_regex_before_text_tl

\cs_new_protected:Npn \__codehigh_parse_code:nN #1 #2
  {
    \tl_set_eq:NN \l__codehigh_code_to_parse_tl #2
    \bool_do_until:nn { \tl_if_empty_p:N \l__codehigh_code_to_parse_tl }
      {
        \__codehigh_parse_code_once:nN { #1 } \l__codehigh_code_to_parse_tl
        \int_compare:nNnTF { \l__codehigh_item_count_int } = { -1 }
          {
            \__codehigh_typeset_text:nN { Default }  \l__codehigh_code_to_parse_tl
            \tl_clear:N \l__codehigh_code_to_parse_tl
          }
          {
            \tl_concat:NNN \l__codehigh_a_tl
              \l__codehigh_regex_before_text_tl \l__codehigh_regex_match_text_tl
            \str_remove_once:NV \l__codehigh_code_to_parse_tl \l__codehigh_a_tl
            %\tl_log:N \l__codehigh_code_to_parse_tl
            \__codehigh_typeset_text:nN { Default } \l__codehigh_regex_before_text_tl
            \__codehigh_typeset_text:VN \l__codehigh_regex_match_name_tl \l__codehigh_regex_match_text_tl
          }
      }
  }

\cs_new_protected:Npn \__codehigh_parse_code_once:nN #1 #2
  {
    \int_set:Nn \l__codehigh_item_count_int { -1 }
    \tl_clear:N \l__codehigh_regex_match_text_tl
    \tl_clear:N \l__codehigh_regex_before_text_tl
    \int_step_inline:nn { \l__codehigh_latex_syntax_count_int }
      {
        \regex_extract_once:cVNT { l__codehigh_ #1 _ ##1 _regex } #2 \l_tmpa_seq
          {
            \seq_get:NN \l_tmpa_seq \l__codehigh_m_tl
            \regex_split:cVNT { l__codehigh_ #1 _ ##1 _regex } #2 \l_tmpb_seq
              {
                \seq_get:NN \l_tmpb_seq \l__codehigh_b_tl
                \tl_set:Nx \l__codehigh_c_tl { \str_count:N \l__codehigh_b_tl }
                \bool_lazy_or:nnT
                  { \int_compare_p:nNn { \l__codehigh_item_count_int } = { -1 } }
                  {
                    \int_compare_p:nNn
                      { \l__codehigh_item_count_int } > { \l__codehigh_c_tl }
                  }
                  {
                    \int_set:Nn \l__codehigh_item_count_int { \l__codehigh_c_tl }
                    \tl_set_eq:NN \l__codehigh_regex_before_text_tl \l__codehigh_b_tl
                    \tl_set_eq:NN \l__codehigh_regex_match_text_tl \l__codehigh_m_tl
                    \tl_set_eq:Nc \l__codehigh_regex_match_name_tl { l__codehigh_ #1 _ ##1 _tl }
                  }
              }
          }
      }
  }

%% #1: style name, #2: text
\cs_new_protected:Npn \__codehigh_typeset_text:nN #1 #2
  {
    \group_begin:
      \regex_replace_all:nnN { \^^M } { \c{par} \c{leavevmode} } #2
      \regex_replace_all:nnN { \  } { \c{relax} \c{space} } #2
      \tl_use:c { l__codehigh_ style_ #1 _tl }
      #2
    \group_end:
  }
\cs_generate_variant:Nn \__codehigh_typeset_text:nN { VN }

\tl_new:N \l__codehigh_doc_tl
\seq_new:N \l__codehigh_doc_seq

\NewDocumentCommand \DochighInput { m }
  {
    \CatchFileDef \l__codehigh_doc_tl {#1} { \__codehigh_do_specials: }
    \__codehigh_typeset_doc:N \l__codehigh_doc_tl
  }

\cs_new_protected:Npn \__codehigh_typeset_doc:N #1
  {
    \seq_set_split:NVV \l__codehigh_doc_seq \g__codehigh_par_par_tl #1
    \seq_map_inline:Nn \l__codehigh_doc_seq
      {
        \tl_gset:Nn \g__codehigh_code_tl {##1}
        \__codehigh_typeset_code:
        \par
        \medskip
      }
  }

\ExplSyntaxOff

